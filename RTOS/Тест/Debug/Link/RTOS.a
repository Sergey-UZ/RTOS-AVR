;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;const unsigned char MAX_IND_TASK_QUEUE = TASK_QUEUE_SIZE - 1;
;eeprom unsigned char eep_ErrTaskQueue       @0x00;  //Ячейка для сохранения ошиб ...
;eeprom unsigned char eep_ErrSoftTimerQueue  @0x01;  //Ячейка для сохранения ошиб ...
;const unsigned char ERR_TASK_QUEUE       = 0xAA;  //Ошибка в указании размера оч ...
;const unsigned char ERR_SOFT_TIMER_QUEUE = 0xBB;  //Ошибка в указании размера оч ...
;volatile TPTR TaskQueue[TASK_QUEUE_SIZE]; // Очередь указателей задач
;volatile struct
;TPTR         GoToTask;  //Указатель перехода к задаче-функции
;unsigned int Time;      //Выдержка в миллисекундах
;SoftTimer[SOFT_TIMER_QUEUE_SIZE];  //Очередь програмных таймеров
; 0001 001D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 001E /* Эта функция переводит чип AVR в режим холостого хода. В этом режиме CPU
; 0001 001F останавливается, но таймеры/счётчики, сторожевой таймер (Wathdog) и
; 0001 0020 система прерываний продолжают работать. CPU можно разбудить внешними и
; 0001 0021 внутренними прерываниями.
; 0001 0022 */
; 0001 0023 idle();
;PCODE: $0000000F VOL: 0
; 0001 0024 }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;void SetTimerTask(TPTR Task, unsigned int NewTime)
; 0001 0037 {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0001 0038 unsigned char i;    // Индексная переменная
; 0001 0039 unsigned char sreg; // Сохраняет регистр SREG чтобы потом восстановить его
; 0001 003A 
; 0001 003B sreg = SREG; // Сохраняем регистр SREG
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;	*Task -> R20,R21
;	NewTime -> R18,R19
;	i -> R17
;	sreg -> R16
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0001 003C #asm("cli")  // Запрещаем прерывания. Помним об атомарном доступе!
;PCODE: $0000001A VOL: 0
; 0001 003D for (i = 0; i != SOFT_TIMER_QUEUE_SIZE; i++) // Прочесываем очередь таймеров
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0001 003E {
; 0001 003F if (SoftTimer[i].GoToTask == Task) // Если уже есть запись с таким адресом
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 1
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 0040 {
; 0001 0041 SoftTimer[i].Time = NewTime; // Перезаписываем ей выдержку
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 1
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0001 0042 SREG = sreg;                   // Восстанавливаем регистр SREG
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0001 0043 return;                        // Выходим
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 0044 }
; 0001 0045 }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0001 0046 for (i = 0; i != SOFT_TIMER_QUEUE_SIZE; i++) // Если не находим похожий таймер,  ...
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0001 0047 {
; 0001 0048 if (SoftTimer[i].GoToTask == CPU_Stop)
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 1
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 0049 {
; 0001 004A SoftTimer[i].GoToTask = Task; // Заполняем поле перехода задачи
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 1
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0001 004B SoftTimer[i].Time = NewTime;  // И поле выдержки времени
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 1
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 004C SREG = sreg;                    // Восстанавливаем регистр SREG
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0001 004D return;                         // Выходим
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 004E }
; 0001 004F }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0001 0050 if (eep_ErrSoftTimerQueue != ERR_SOFT_TIMER_QUEUE) // Зафиксировать ошибку тольк ...
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 0051 eep_ErrSoftTimerQueue = ERR_SOFT_TIMER_QUEUE;    // Код ошибки
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0001 0052 SREG = sreg; // Восстанавливаем регистр SREG
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0001 0053 }
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;void InitRTOS(void)
; 0001 005D {
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0001 005E unsigned char i; // Индексная переменная
; 0001 005F 
; 0001 0060 sleep_enable(); // Разрешить перевод в режим пониженного энергопотребления
;PCODE: $00000079 VOL: 0
;	i -> R17
;PCODE: $0000007A VOL: 0
; 0001 0061 for (i = 0; i != TASK_QUEUE_SIZE; i++) // Во все позиции записываем CPU_Stop
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0001 0062 TaskQueue[i] = CPU_Stop;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 1
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0001 0063 for (i = 0; i != 2; i++)
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 0064 SoftTimer[i].GoToTask = CPU_Stop;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 1
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0001 0065 }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;void TaskManager(void)
; 0001 0072 {
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0001 0073 unsigned char i; // Индексная переменная
; 0001 0074 TPTR GoToTask;   // Указатель на адреса переходов (задач)
; 0001 0075 
; 0001 0076 /* Запрещаем прерывания! Прерывания надо запрещать потому что идёт обращение
; 0001 0077 к глобальной очереди задач диспетчера. Её могут менять и прерывания.
; 0001 0078 Поэтому заботимся об атомарности операции.
; 0001 0079 */
; 0001 007A #asm("cli")
;PCODE: $000000AA VOL: 0
;	i -> R17
;	*GoToTask -> R18,R19
;PCODE: $000000AB VOL: 0
; 0001 007B GoToTask = TaskQueue[0]; // Берём первое значение из очереди
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 1
; 0001 007C if (GoToTask == CPU_Stop)  // Если там пусто
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0001 007D {
; 0001 007E #asm("sei") // Разрешаем прерывания
;PCODE: $000000B1 VOL: 0
; 0001 007F CPU_Stop(); // Переходим на функцию простоя ядра
;PCODE: $000000B2 VOL: 0
; 0001 0080 }
; 0001 0081 else
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0001 0082 {
; 0001 0083 for (i = 0; i != MAX_IND_TASK_QUEUE; i++) // В противном случае сдвигаем всю оче ...
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0001 0084 TaskQueue[i] = TaskQueue[i + 1];
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 1
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 1
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0001 0085 TaskQueue[MAX_IND_TASK_QUEUE] = CPU_Stop;
;PCODE: $000000D1 VOL: 1
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0001 0086 #asm("sei") // Разрешаем прерывания
;PCODE: $000000D5 VOL: 0
; 0001 0087 GoToTask(); // Переходим к задаче
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0001 0088 }
;PCODE: $000000D8 VOL: 0
; 0001 0089 }
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;void DeleteTask(TPTR Task)
; 0001 0097 {
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0001 0098 unsigned char i;    // Индексная переменная
; 0001 0099 unsigned char ind;  // Индексная переменная
; 0001 009A unsigned char sreg; // Сохраняет регистр SREG чтобы потом восстановить его
; 0001 009B 
; 0001 009C sreg = SREG; // Сохраняем регистр SREG
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;	*Task -> R20,R21
;	i -> R17
;	ind -> R16
;	sreg -> R19
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0001 009D #asm("cli")  // Запрещаем прерывания. Помним об атомарном доступе!
;PCODE: $000000E3 VOL: 0
; 0001 009E // Прочёсываем очередь задач
; 0001 009F i = 0;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0001 00A0 while (i != TASK_QUEUE_SIZE)
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0001 00A1 {
; 0001 00A2 if (TaskQueue[i] == Task) // Если задача найдена
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 1
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0001 00A3 {
; 0001 00A4 // Сдвигаем очередь начиная с найденного индекса до конца очереди. Последнюю зап ...
; 0001 00A5 for (ind = i; ind != MAX_IND_TASK_QUEUE; ind++)
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0001 00A6 TaskQueue[ind] = TaskQueue[ind + 1];
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 1
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 1
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0001 00A7 TaskQueue[MAX_IND_TASK_QUEUE] = CPU_Stop;
;PCODE: $0000010E VOL: 1
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0001 00A8 }
; 0001 00A9 else i++;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0001 00AA }
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0001 00AB // Прочёсываем очередь таймеров
; 0001 00AC i = 0;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0001 00AD while (i != SOFT_TIMER_QUEUE_SIZE)
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0001 00AE {
; 0001 00AF if (SoftTimer[i].GoToTask == Task) // Если есть запись с таким-же адресом задачи ...
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 1
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0001 00B0 {
; 0001 00B1 SoftTimer[i].GoToTask = CPU_Stop; // В эту запись пихаем затычку - простоя ядра
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 1
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0001 00B2 i = SOFT_TIMER_QUEUE_SIZE; // Завершить прочёсывание очереди таймеров
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0001 00B3 }
; 0001 00B4 else i++;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0001 00B5 }
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0001 00B6 SREG = sreg; // Восстанавливаем регистр SREG
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0001 00B7 }
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;void SetTask(TPTR Task)
; 0001 00C6 {
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0001 00C7 unsigned char i = 0; // Индексная переменная
; 0001 00C8 unsigned char sreg;  // Сохраняет регистр SREG чтобы потом восстановить его
; 0001 00C9 
; 0001 00CA sreg = SREG; // Сохраняем регистр SREG
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;	*Task -> R18,R19
;	i -> R17
;	sreg -> R16
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0001 00CB #asm("cli")  // Запрещаем прерывания. Помним об атомарном доступе!
;PCODE: $00000145 VOL: 0
; 0001 00CC //Прочесываем очередь задач на предмет свободной ячейки с значением CPU_Stop - к ...
; 0001 00CD while (TaskQueue[i] != CPU_Stop)
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 1
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0001 00CE {
; 0001 00CF i++;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0001 00D0 // Если очередь переполнена то выходим
; 0001 00D1 if (i == TASK_QUEUE_SIZE)
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0001 00D2 {
; 0001 00D3 if (eep_ErrTaskQueue != ERR_TASK_QUEUE) // Зафиксировать ошибку только один раз
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0001 00D4 eep_ErrTaskQueue = ERR_TASK_QUEUE; 		// Код ошибки
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0001 00D5 SREG = sreg; // Восстанавливаем регистр SREG
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0001 00D6 return;      // Выходим
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0001 00D7 }
; 0001 00D8 }
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0001 00D9 // Если нашли свободное место, то
; 0001 00DA TaskQueue[i] = Task; // Записываем в очередь задачу
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 1
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0001 00DB SREG = sreg; // Восстанавливаем регистр SREG
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0001 00DC }
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;void TimerService(void)
; 0001 00ED {
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0001 00EE unsigned char i; // Индексная переменная
; 0001 00EF 
; 0001 00F0 for (i = 0; i != SOFT_TIMER_QUEUE_SIZE; i++) // Прочесываем очередь таймеров
;PCODE: $00000174 VOL: 0
;	i -> R17
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0001 00F1 {
; 0001 00F2 if (SoftTimer[i].GoToTask == CPU_Stop) continue; // Если нашли пустышку — следую ...
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 1
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0001 00F3 if (SoftTimer[i].Time != 0) // Если таймер не выщелкал, то щёлкаем еще раз
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 1
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0001 00F4 SoftTimer[i].Time--;      //Уменьшаем число в ячейке
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 1
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0001 00F5 else // Дощёлкали до нуля?
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0001 00F6 {
; 0001 00F7 SetTask(SoftTimer[i].GoToTask);   // Забрасываем в очередь задачу
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 1
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0001 00F8 SoftTimer[i].GoToTask = CPU_Stop; // А в ячейку пишем затычку
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 1
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0001 00F9 }
;PCODE: $000001AD VOL: 0
; 0001 00FA }
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0001 00FB }
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
